#!/usr/bin/env python3
import argparse
import requests
import sys

API_KEY = '<YOUR KEY GOES HERE>'

def status(text):
    print(text, end='', flush=True)

def status_nl(text):
    print(text, flush=True)

def upload(inputfile):
    status("Uploading...")
    with open(inputfile, 'rb') as f:
        return requests.post('https://api.tinify.com/shrink',
                             auth=('api', API_KEY),
                             data=f)

def download(url, outputfile):
    status("Downloading...")
    dl = requests.get(url, stream=True)

    with open(outputfile, 'wb') as f:
        for chunk in dl.iter_content(chunk_size=1024):
            status(".")
            if chunk:
                f.write(chunk)

def print_upload_success(json):
    status_nl("Finished.")
    status_nl("Compression: {}% ({}B â†’ {}B)".format(json['output']['ratio'],
                                                    json['input']['size'],
                                                    json['output']['size']))

def print_download_success(outputfile):
    status_nl("Finished.")
    status_nl("Wrote tinified image to {}".format(outputfile))

def print_fail_and_exit(response):
    status_nl("Failed :(")
    status_nl(res.headers)
    status_nl(response.json())
    sys.exit(-1)


parser = argparse.ArgumentParser()
parser.add_argument('inputfile', type=str,
                    help='The file to be tinified. May be JPG or PNG')
parser.add_argument('-o', '--output', type=str, default=None,
                    help=('Filename where the tinified output should be'
                          'stored. Defaults to inputfile with ".tiny"'
                          'inserted before the file type extension'))

args = parser.parse_args()

if not (args.inputfile.endswith('.jpg') or args.inputfile.endswith('.png')):
    status_nl("Only jpg and png files are allowed")
    sys.exit(1)

if args.output is None:
    args.output = "{}.tiny{}".format(args.inputfile[:-4], args.inputfile[-4:])



res = upload(args.inputfile)
if res.ok:
    json = res.json()
    print_upload_success(json)

    url = json['output']['url']
    download(url, args.output)

    print_download_success(args.output)

else:
    print_fail_and_exit(res)
