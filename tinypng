#!/usr/bin/env python3
import argparse
import requests
import os
import sys

PROGRESS_BAR_LENGTH = 20

def rotator(states):
    state = 0
    while True:
        yield states[state]
        state = (state + 1) % len(states)

try:
    with open(os.environ['HOME'] + "/.tinypng_api_key", 'r') as f:
        API_KEY = f.readline().strip()
except FileNotFoundError:
    print("You need to obtain a API key from tinypng.com first.")
    print("Go to https://tinypng.com/developers to get one.")
    print("Place it in $HOME/.tinypng_api_key then run this command again")
    sys.exit(1)

def humanify(_bytes):
    units = 'B,KB,MB,GB,TB,PB,EB,ZB'.split(',')
    factor = 0

    while _bytes > 1024:
        _bytes = _bytes / 1024
        factor = factor + 1

    return "{}{}".format(round(_bytes, 1), units[factor])

def status(text):
    print(text, end='', flush=True)

def status_nl(text):
    print(text, flush=True)

rotate = rotator('|/-\\')
def status_bar(ratio):
    rotator = rotate.__next__() if ratio < 1 else '✓'
    bar_length = int(ratio * PROGRESS_BAR_LENGTH)
    bar_remainder = PROGRESS_BAR_LENGTH - bar_length
    percent = round(ratio * 100, 3)
    status('\rDownloading {} [{}{}] {}%     '.format(rotator,
                                                     '=' * bar_length,
                                                     ' ' * bar_remainder,
                                                     percent))
    if ratio is 1:
        status_nl('')

def upload(inputfile):
    status("Uploading...")
    with open(inputfile, 'rb') as f:
        return requests.post('https://api.tinify.com/shrink',
                             auth=('api', API_KEY),
                             data=f)

def download(url, outputfile):
    status_bar(0)
    dl = requests.get(url, stream=True)

    size_total = int(dl.headers['content-length'])
    size_downloaded = 0

    with open(outputfile, 'wb') as f:
        for chunk in dl.iter_content(chunk_size=1024):
            size_downloaded = size_downloaded + len(chunk)
            status_bar(size_downloaded / size_total)
            if chunk:
                f.write(chunk)
    status_bar(1)

def print_upload_success(json):
    ratio = round(float(json['output']['ratio']) * 100, 3)
    input_human = humanify(json['input']['size'])
    output_human = humanify(json['output']['size'])
    status_nl("Finished.")
    status_nl("Compression: {}% ({} →  {})".format(ratio,
                                                    input_human,
                                                    output_human))

def print_download_success(outputfile):
    status_nl("Wrote tinified image to {}".format(outputfile))

def print_fail_and_exit(response):
    status_nl("Failed :(")
    status_nl(res.headers)
    status_nl(response.json())
    sys.exit(-1)


parser = argparse.ArgumentParser()
parser.add_argument('inputfile', type=str,
                    help='The file to be tinified. May be JPG or PNG')
parser.add_argument('-o', '--output', type=str, default=None,
                    help=('Filename where the tinified output should be '
                          'stored. Defaults to inputfile with ".tiny" '
                          'inserted before the file type extension'))

args = parser.parse_args()

if not (args.inputfile.endswith('.jpg') or args.inputfile.endswith('.png')):
    status_nl("Only jpg and png files are allowed")
    sys.exit(1)

if args.output is None:
    args.output = "{}.tiny{}".format(args.inputfile[:-4], args.inputfile[-4:])



res = upload(args.inputfile)
if res.ok:
    json = res.json()
    print_upload_success(json)

    url = json['output']['url']
    download(url, args.output)

    print_download_success(args.output)

else:
    print_fail_and_exit(res)
